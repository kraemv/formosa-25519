require "shared_const.jinc"

from formosa25519 require "crypto_sign/ed25519/amd64/common/load_ptr4.jinc"
from formosa25519 require "crypto_sign/ed25519/amd64/common/64/add4.jinc"
from formosa25519 require "crypto_sign/ed25519/amd64/common/64/sub4.jinc"
from formosa25519 require "crypto_sign/ed25519/amd64/common/64/add5.jinc"
from formosa25519 require "crypto_sign/ed25519/amd64/common/64/sub5.jinc"
require "neg.jinc"
require "mul4.jinc"
require "sqr4.jinc"

inline fn ge25519_dbl_p1p1(reg ptr u64[12] pp) -> stack u64[16]
{
	reg u64[5] a b c d e;
	reg u64[4] d4 e4;
	stack u64[5] as bs cs;
	stack u64[16] r;
	reg ptr u64[4] p_ptr;
	reg bool cf;
	inline int i;
	
	p_ptr = pp[8:4];
	a = __sqr5_rp(p_ptr);
	
	cf, a[0] += a[0];
	for i=1 to 5
	{ cf, a[i] += a[i] + cf; }
	as = #copy(a);
	
	p_ptr = pp[4:4];
	b = __sqr5_rp(p_ptr);
	bs = #copy(b);
	
	p_ptr = pp[0:4];
	c = __sqr5_rp(p_ptr);
	cs = #copy(c);
	
	c = __neg5_rr(c);
	
	// __add5_rrs(a, bs)
	cf, c[0] += bs[0];
  for i=1 to 5
  { cf, c[i] += bs[i] + cf; }
	d = #copy(c);
	
  _, _, _, _, _, c[4] = #SHLD(c[4], c[3], 1);
  c[3] &= mask63;
	
	_,_,_,_,_,c[4] = #IMULri ( c[4], 19 );
	cf, c[0] = c[0] + c[4];
	cf, c[1] = c[1] + 0 + cf;
	cf, c[2] = c[2] + 0 + cf;
	_ , c[3] = c[3] + 0 + cf;
	
	for i=0 to 4
	{	r[4+i] = c[i]; }
	
	// sub
	r[12:4] = __sub5_srs_(d, as);
	
	// neg
	b = __neg5_rs(bs);
	
	// sub
	d4 = __sub5_rrs(b, cs);
	r[8:4] = #copy(d4);
	
	// add
	e4 = __add4_rss(pp[0:4], pp[4:4]);
	
	// square
	e = __sqr5_rr(e4);
	
	// add
	e4 = __add54_rrs(e, r[8:4]);
	r[0:4] = #copy(e4);
	
	return r;
}

inline fn ge25519_dbl_p1p1_prep(reg ptr u64[12] pp) -> stack u64[16], reg ptr u64[12]
{
	reg u64[4] d4 e4 xaddy _xaddy ysubx;
	reg u64[5] a b c e;
	stack u64[5] as bs;
	stack u64[16] r;
	reg ptr u64[4] p_ptr;
	reg bool cf;
	inline int i;
	
	p_ptr = pp[4:4];
	b = __sqr5_rp(p_ptr);
	bs = #copy(b);
	
	p_ptr = pp[0:4];
	a = __sqr5_rp(p_ptr);
	as = #copy(a);
	
	a = __neg5_rr(a);
	
	// __add5_rrs(a, bs)
	cf, a[0] += bs[0];
  for i=1 to 5
  { cf, a[i] += bs[i] + cf; }
	c = #copy(a);
	
  _, _, _, _, _, a[4] = #SHLD(a[4], a[3], 1);
  a[3] &= mask63;
	
	_,_,_,_,_,a[4] = #IMULri ( a[4], 19 );
	cf, a[0] = a[0] + a[4];
	cf, a[1] = a[1] + 0 + cf;
	cf, a[2] = a[2] + 0 + cf;
	_ , a[3] = a[3] + 0 + cf;
	for i=0 to 4
	{	r[4+i] = a[i]; }
	
	// sub
	r[12:4] = __subi5_ris(c, 2);
	
	// neg
	b = __neg5_rs(bs);
	
	// sub
	d4 = __sub5_rrs(b, as);
	r[8:4] = #copy(d4);
	
	// Prepare pre[0]
	p_ptr = pp[0:4];
	ysubx = __load_ptr4(p_ptr);
	p_ptr = pp[4:4];
	xaddy = __load_ptr4(p_ptr);
	_xaddy = #copy(xaddy);
	
	// sub
	pp[0:4] = __sub4_srr(xaddy, ysubx);
	// add
	pp[4:4] = __add4_srr(_xaddy, ysubx);
	
	// square
	p_ptr = pp[4:4];
	e = __sqr5_rp(p_ptr);
	
	// add
	e4 = __add54_rrs(e, r[8:4]);
	r[0:4] = #copy(e4);
	
	return r, pp;
}
