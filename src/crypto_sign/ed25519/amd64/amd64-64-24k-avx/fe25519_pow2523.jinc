require "sqr4.jinc"
require "mul4.jinc"

inline fn fe25519_pow2523(reg u64[4] x) -> reg u64[4]
{
	reg u64[4] z2 z11 z2_5_0 z2_10_0 z2_20_0 z2_50_0 z2_100_0 t;
	stack u64[4] xs z2s z9s z2_5_0s z2_10_0s z2_20_0s z2_50_0s z2_100_0s;
	reg u64[4] r;
	inline int i;
	
	xs = #copy(x);
	z2 = __sqr4_rr(x);
	z2s = #copy(z2);
	t = __sqr4_rr(z2);
	t = __sqr4_rr(t);
	z9s = __mul4_ssr(xs, t);
	z11 = __mul4_rss(z9s, z2s);
	t = __sqr4_rr(z11);
	z2_5_0 = __mul4_rsr(z9s, t);
	z2_5_0s = #copy(z2_5_0);
	
	t = __sqr4_rr(z2_5_0);
	for i=1 to 5{
		t = __sqr4_rr(t);
	}
	z2_10_0 = __mul4_rsr(z2_5_0s, t);
	z2_10_0s = #copy(z2_10_0);
	
	t = __sqr4_rr(z2_10_0);
	for i=1 to 10{
		t = __sqr4_rr(t);
	}
	z2_20_0 = __mul4_rsr(z2_10_0s, t);
	z2_20_0s = #copy(z2_20_0);
	
	t = __sqr4_rr(z2_20_0);
	for i=1 to 20{
		t = __sqr4_rr(t);
	}
	t = __mul4_rsr(z2_20_0s, t);
	
	t = __sqr4_rr(t);
	for i=1 to 10{
		t = __sqr4_rr(t);
	}
	z2_50_0 = __mul4_rsr(z2_10_0s, t);
	z2_50_0s = #copy(z2_50_0);
	
	t = __sqr4_rr(z2_50_0);
	for i=1 to 50{
		t = __sqr4_rr(t);
	}
	z2_100_0 = __mul4_rsr(z2_50_0s, t);
	z2_100_0s = #copy(z2_100_0);
	
	t = __sqr4_rr(z2_100_0);
	for i=1 to 100{
		t = __sqr4_rr(t);
	}
	t = __mul4_rsr(z2_100_0s, t);
	
	t = __sqr4_rr(t);
	for i=1 to 50{
		t = __sqr4_rr(t);
	}
	t = __mul4_rsr(z2_50_0s, t);
	
	t = __sqr4_rr(t);
	t = __sqr4_rr(t);
	r = __mul4_rsr(xs, t);
	
	return r;
}
