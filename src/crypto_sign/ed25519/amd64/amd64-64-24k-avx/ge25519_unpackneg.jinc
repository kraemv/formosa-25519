require "shared_const.jinc"

from formosa25519 require "crypto_sign/ed25519/amd64/common/64/add4.jinc"
from formosa25519 require "crypto_sign/ed25519/amd64/common/64/cmp4.jinc"
from formosa25519 require "crypto_sign/ed25519/amd64/common/64/sub4.jinc"

require "sqr4.jinc"
require "mul4.jinc"
require "fe25519_freeze.jinc"
require "fe25519_pow2523.jinc"

u64[4] point26_x = {0x5bf5acbd527f9b28,0xa4564f8c5508aa23,0x4daaa6d39e2975af,0x6fe31a937f53b071};
u64[4] point26_y = {26,0,0,0};

inline fn ge25519_unpackneg_vartime(stack u64[16] rs, reg ptr u8[32] pp, #msf reg u64 msf) -> stack u64[16], reg u64, #msf reg u64
{
	reg u8 cmp_8 par x_par;
	reg u64 cmp_64 subt0 subt1 valid;
	reg u256 v_256 valid_256;
	reg u64[4] t chk num num_freeze den den2 den4 den6 _rx rx rx_freeze ry rt sub_x z;
	stack u8 pars;
	stack u64 valids;
	stack u64[4] nums dens den2s pcheck;
	
	reg bool cf cond;
	inline int i;
	#mmx reg u64 msf_s;
	
	par = pp[31];
	par = par >> 7;
	pars = par;
	
	rs[8] = 1;
	rs[9] = 0;
	rs[10] = 0;
	rs[11] = 0;
	
	
	for i=0 to 3
	{
		ry[i] = pp[u64 i];
		rs[4+i] = ry[i];
	}
	ry[3] = pp[u64 3];
	ry[3] &= 0x7fffffffffffffff;
	rs[7] = ry[3];
	
	msf_s = #mov_msf(msf);
	
	pcheck = __freeze4_ss(rs[4:4]);
	par = pars;
	par = par << 7;
	pcheck[u8 31] |= par;
	cmp_8 = __cmp4_ps(pp, pcheck);
	
	valid = (64u)cmp_8;
	valids = valid;
	for i=0 to 4
	{
		ry[i] = rs[4+i];
	}
	
	num = __sqr4_rr(ry);
	nums = #copy(num);
	den = __mul4_rsr(ecd, num);
	num = #copy(nums);
	num = __sub4_rrs(num, rs[8:4]);
	nums = #copy(num);
	den = __add4_rrs(den, rs[8:4]);
	dens = #copy(den);
	
	// Computation of sqrt(num/den)
  //  1.: computation of num^((p-5)/8)*den^((7p-35)/8) = (num*den^7)^((p-5)/8)
  
	den2 = __sqr4_rr(den);
	den2s = #copy(den2);
	den4 = __sqr4_rr(den2);
	den6 = __mul4_rsr(den2s, den4);
	t = __mul4_rsr(nums, den6);
	t = __mul4_rsr(dens, t);
	
	t = fe25519_pow2523(t);
	
	// 2. computation of r->x = t * num * den^3
  
	t = __mul4_rsr(nums, t);
	t = __mul4_rsr(dens, t);
	t = __mul4_rsr(dens, t);
	rx = __mul4_rsr(dens, t);
	
	for i=0 to 4
	{
		rs[i] = rx[i];
	}
	
	// 3. Check whether sqrt computation gave correct result, multiply by sqrt(-1) if not:
  
	chk = __sqr4_rr(rx);
	chk = __mul4_rsr(dens, chk);
	chk = __freeze4_rr(chk);
	num_freeze = __freeze4_rs(nums);
	cmp_8 = __cmp4_rr(chk, num_freeze);
	
	for i=0 to 4
	{
		rx[i] = rs[i];
	}
	
	msf = #mov_msf(msf_s);
	cmp_8 = #protect_8(cmp_8, msf);
	cond = (cmp_8 == 0);
	if (cond){
		msf = #update_msf(cond, msf);
		msf_s = #mov_msf(msf);
		_rx = __mul4_rsr(sqrtm1, rx);
		rx = #copy(_rx);
	}
	else{
		msf = #update_msf(!cond, msf);
		msf_s = #mov_msf(msf);
	}
	
	for i=0 to 4
	{
		rs[i] = rx[i];
	}
	
	// 4. Now we have one of the two square roots, except if input was not a square
  
  chk = __sqr4_rr(rx);
  chk = __mul4_rsr(dens, chk);
  
  num_freeze = __freeze4_rs(nums);
	chk = __freeze4_rr(chk);
	cmp_8 = __cmp4_rr(chk, num_freeze);
	cmp_64 = (64u)cmp_8;
	valids &= cmp_64;
	
	// 5. Choose the desired square root according to parity:
  
  for i=0 to 4
	{
		rx[i] = rs[i];
	}
  rx_freeze = __freeze4_rr(rx);
  x_par = (8u)rx_freeze[0];
  x_par &= 1;
 	
 	cmp_8 = x_par ^ pars;
 	msf = #mov_msf(msf_s);
	cmp_8 = #protect_8(cmp_8, msf);
	cond = (cmp_8 == 0);
 	if (cond){
 		msf = #update_msf(cond, msf);
		msf_s = #mov_msf(msf);
		sub_x = #copy(rx);
 		rx[0] = 0;
		rx[1] = 0;
		rx[2] = 0;
		rx[3] = 0;
		
		cf, rx[0] -= sub_x[0];
		cf, rx[1] -= sub_x[1] - cf;
		cf, rx[2] -= sub_x[2] - cf;
		cf, rx[3] -= sub_x[3] - cf;

		subt0 = 0;
		subt1 = 38;
		subt1 = #CMOVcc_64(!cf, subt0, subt1);

		cf, rx[0] -= subt1;
		cf, rx[1] -= subt0 - cf;
		cf, rx[2] -= subt0 - cf;
		cf, rx[3] -= subt0 - cf;
		
		subt0 = #CMOVcc_64(cf, subt1, subt0);

		rx[0] -= subt0;
 	}
 	else{
		msf = #update_msf(!cond, msf);
		msf_s = #mov_msf(msf);
	}
	
	for i=0 to 4
	{
		rs[i] = rx[i];
		?{}, z[i] = #set0();
	}
	
	cmp_8 = __cmp4_rr(rx, z);
	par = pars;
	valid = valids;
	cmp_8 &= par;
	cmp_64 = (64u)cmp_8;
	valid = !cmp_64 & valid;
	valids = valid;
	
	valid =-valid;
	valid_256 = (256u)#VMOV_64(valid);
	valid_256 = #VPBROADCAST_32u8(valid_256);
	v_256 = point26_x[u256 0];
	v_256 = #VPBLENDVB_256(v_256, rs[u256 0], valid_256);
	rs[u256 0] = v_256;
	v_256 = point26_y[u256 0];
	v_256 = #VPBLENDVB_256(v_256, rs[u256 1], valid_256);
	rs[u256 1] = v_256;
	
	for i=0 to 4
	{
		rx[i] = rs[i];
	}
	
	rt = __mul4_rsr(rs[4:4], rx);
	
	msf = #mov_msf(msf_s);
	
	rs[12] = rt[0];
	rs[13] = rt[1];
	rs[14] = rt[2];
	rs[15] = rt[3];
	
	valid = valids;
	
	return rs, valid, msf;
}
