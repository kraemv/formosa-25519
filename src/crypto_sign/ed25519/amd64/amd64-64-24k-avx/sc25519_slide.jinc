fn sc25519_slide(reg u64[4] s, reg ptr u8[256] r, reg u64 swindowsize, #msf reg u64 msf) -> reg ptr u8[256], #msf reg u64
{
	#public inline int soplen;
	#public reg u16 c_2 inv_val neg_val new_val new_window state state_01 xor_val;
	#public reg bool cond s0 s1 zf;
	#public reg u64 addr b _1r k i z;
	// #public stack u8[256] r;
	
	swindowsize -= 1;
	
	soplen = 256;
	
	
	k = 0;
	while {cond=(k < 64);}(cond)
	{
		msf = #update_msf(cond, msf);
		r[(int)k] 			= s[0];
		r[(int)k]  			&= 1;
		r[(int)k+64] 		= s[1];
		r[(int)k+64] 		&= 1;
		r[(int)k+128] 	= s[2];
		r[(int)k+128] 	&= 1;
		r[(int)k+192] 	= s[3];
		r[(int)k+192] 	&= 1;
		
		s[0] = s[0] >> 1;
		s[1] = s[1] >> 1;
		s[2] = s[2] >> 1;
		s[3] = s[3] >> 1;
		k += 1;
	}
	msf = #update_msf(!cond, msf);
	
	state = 2;
	new_window = 0;
	addr = 0;
	b = swindowsize;
	b += 1;
	i = 0;
	_1r = 1;
	?{}, z = #set0();
	while{cond=(i < soplen);}(cond){
		msf = #update_msf(cond, msf);
		
		new_val = (16u)r[i];
		inv_val = new_val;
		c_2 = 2;
		c_2 += new_val;
		?{}, new_val = #SHL_16(new_val, (8u)b);
		neg_val = new_val;
		// Set state to 1 on critical bit
		?{"<u" = s0, "==" = s1} = #CMP(b, swindowsize);
		new_val = #CMOVcc_16(!s0, (16u)z, new_val);
		neg_val = #CMOVcc_16(!s1, (16u)z, neg_val);
		state = #CMOVcc_16(s1, c_2, state);
		new_window += new_val;
		new_window -= neg_val;
		
		// XOR in state 4, otherwise set to 0 anyways
		state_01 = state;
		xor_val = state;
		xor_val &= 1;
		state_01 = state_01 >> 1;
		inv_val ^= xor_val;
		r[i] = inv_val;
		// Inv val = 1 if r[i] = 1 and state 012; Inv val = 0 if r[i] = 1 and state 3
		r[i] &= (8u)state_01;
		
		// Write update value to the target
		addr = #protect(addr, msf);
		r[addr] = new_window;
		b += 1;
		
		// State 0 setup (jump to state 1 immidiatly)
		?{ ZF = zf }, state_01 = #AND_16(state_01, inv_val);
		b = #CMOVcc(!zf, _1r, b);
		new_window = #CMOVcc_16(!zf, (16u)_1r, new_window);
		state = #CMOVcc_16(!zf, z, state);
		addr = #CMOVcc(!zf, i, addr);
		
		i += 1;
	}
	msf = #update_msf(!cond, msf);
	
	return r, msf;
}
