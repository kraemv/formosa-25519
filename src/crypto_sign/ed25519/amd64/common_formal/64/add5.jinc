require "../shared_const.jinc"

abstract predicate bool eqmod(int, int, tuple);
abstract predicate tuple single(int);
abstract predicate int b2i(bool);
abstract predicate int u64i(u64);
abstract predicate int pow(int, int);

fn __add5_rrr(reg u64[5] a, reg u64[5] b) -> reg u64[4]
	requires #[prover=smt]{a[4] < 256}
	requires #[prover=smt]{b[4] < 256}
	ensures #[prover=cas] {
  eqmod (
     \sum (ii \in 0:4) (pow(2, 64*ii)*u64i(result.0[ii])),
     \sum (ii \in 0:5) (pow(2, 64*ii)*u64i(a[ii])) + \sum (ii \in 0:5) (pow(2, 64*ii)*u64i(b[ii])),
     single((pow(2,255)) - 19)
    )
  }
{
	reg u64[4] c;
	reg bool cf;
	inline int i;
	
	cf, a[0] += b[0];
  for i=1 to 5
  { cf, a[i] += b[i] + cf; }
  
  #[kind=Assert, prover=smt] assert (!cf);
  #[kind=Assume, prover=cas] assert (b2i(cf) == 0);

  _, _, _, _, _, a[4] = #SHLD(a[4], a[3], 1);
  a[3] &= mask63;
	
	_,_,_,_,_,a[4] = #IMULri ( a[4], 19 );
	cf, c[0] = a[0] + a[4];
	cf, c[1] = a[1] + 0 + cf;
	cf, c[2] = a[2] + 0 + cf;
	cf, c[3] = a[3] + 0 + cf;
	
	#[kind=Assert, prover=smt] assert (!cf);
  #[kind=Assume, prover=cas] assert (b2i(cf) == 0);

	return c;
}

inline fn __add5_rrs(reg u64[5] a, stack u64[5] b) -> reg u64[4]
	requires #[prover=smt]{a[4] < 256}
	requires #[prover=smt]{b[4] < 256}
	ensures #[prover=cas] {
  eqmod (
     \sum (ii \in 0:4) (pow(2, 64*ii)*u64i(result.0[ii])),
     \sum (ii \in 0:5) (pow(2, 64*ii)*u64i(a[ii])) + \sum (ii \in 0:5) (pow(2, 64*ii)*u64i(b[ii])),
     single((pow(2,255)) - 19)
    )
  }
{
	reg u64[4] c;
	reg bool cf;
	inline int i;
	
	cf, a[0] += b[0];
  for i=1 to 5
  { cf, a[i] += b[i] + cf; }
  
  #[kind=Assert, prover=smt] assert (!cf);
  #[kind=Assume, prover=cas] assert (b2i(cf) == 0);

  _, _, _, _, _, a[4] = #SHLD(a[4], a[3], 1);
  a[3] &= mask63;
	
	_,_,_,_,_,a[4] = #IMULri ( a[4], 19 );
	cf, c[0] = a[0] + a[4];
	cf, c[1] = a[1] + 0 + cf;
	cf, c[2] = a[2] + 0 + cf;
	cf, c[3] = a[3] + 0 + cf;
	
	#[kind=Assert, prover=smt] assert (!cf);
  #[kind=Assume, prover=cas] assert (b2i(cf) == 0);

	return c;
}

inline fn __add54_rrs(reg u64[5] a, stack u64[4] b) -> reg u64[4]
	requires #[prover=smt]{a[4] < 256}
	ensures #[prover=cas] {
  eqmod (
     \sum (ii \in 0:4) (pow(2, 64*ii)*u64i(result.0[ii])),
     \sum (ii \in 0:5) (pow(2, 64*ii)*u64i(a[ii])) + \sum (ii \in 0:4) (pow(2, 64*ii)*u64i(b[ii])),
     single((pow(2,255)) - 19)
    )
  }
{
	reg u64[4] c;
	reg bool cf;
	inline int i;
	
	cf, a[0] += b[0];
  for i=1 to 4
  { cf, a[i] += b[i] + cf; }
  cf, a[4] += 0 + cf;
  
  #[kind=Assert, prover=smt] assert (!cf);
  #[kind=Assume, prover=cas] assert (b2i(cf) == 0);

  _, _, _, _, _, a[4] = #SHLD(a[4], a[3], 1);
  a[3] &= mask63;
	
	_,_,_,_,_,a[4] = #IMULri ( a[4], 19 );
	cf, c[0] = a[0] + a[4];
	cf, c[1] = a[1] + 0 + cf;
	cf, c[2] = a[2] + 0 + cf;
	cf, c[3] = a[3] + 0 + cf;
	
	#[kind=Assert, prover=smt] assert (!cf);
  #[kind=Assume, prover=cas] assert (b2i(cf) == 0);

	return c;
}

fn __add5_rrp(reg u64[5] a, reg ptr u64[5] b) -> reg u64[4]
	requires #[prover=smt]{a[4] < 256}
	requires #[prover=smt]{b[4] < 256}
	ensures #[prover=cas] {
  eqmod (
     \sum (ii \in 0:4) (pow(2, 64*ii)*u64i(result.0[ii])),
     \sum (ii \in 0:5) (pow(2, 64*ii)*u64i(a[ii])) + \sum (ii \in 0:5) (pow(2, 64*ii)*u64i(b[ii])),
     single((pow(2,255)) - 19)
    )
  }
{
	reg u64[4] c;
	reg bool cf;
	inline int i;
	
	cf, a[0] += b[0];
  for i=1 to 5
  { cf, a[i] += b[i] + cf; }
  
  #[kind=Assert, prover=smt] assert (!cf);
  #[kind=Assume, prover=cas] assert (b2i(cf) == 0);

  _, _, _, _, _, a[4] = #SHLD(a[4], a[3], 1);
  a[3] &= mask63;
	
	_,_,_,_,_,a[4] = #IMULri ( a[4], 19 );
	cf, c[0] = a[0] + a[4];
	cf, c[1] = a[1] + 0 + cf;
	cf, c[2] = a[2] + 0 + cf;
	cf, c[3] = a[3] + 0 + cf;
	
	#[kind=Assert, prover=smt] assert (!cf);
  #[kind=Assume, prover=cas] assert (b2i(cf) == 0);

	return c;
}

inline fn __add5_srs(reg u64[5] a, stack u64[5] b) -> stack u64[4]
{
	reg u64[4] c;
	stack u64[4] cs;
	
	c = __add5_rrs(a, b);
	cs = #copy(c);

	return cs;
}
