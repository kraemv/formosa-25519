abstract predicate bool eqmod(int, int, tuple);
abstract predicate tuple single(int);
abstract predicate int b2i(bool);
abstract predicate int u64i(u64);
abstract predicate int pow(int, int);

// h = f - g
// h = (2**0*f0 + 2**64*f1 + 2**128*f2 + 2**192*f3) -
//     (2**0*g0 + 2**64*g1 + 2**128*g2 + 2**192*g3)

fn __sub4_rrp(reg u64[4] f, reg ptr u64[4] gs) -> reg u64[4]
  ensures #[prover=cas] {
  eqmod (
     \sum (ii \in 0:4) (pow(2, 64*ii)*u64i(result.0[ii])),
     \sum (ii \in 0:4) (pow(2, 64*ii)*u64i(f[ii])) - \sum (ii \in 0:4) (pow(2, 64*ii)*u64i(gs[ii])),
     single((pow(2,255)) - 19)
    )
  }
{
  inline int i;
  reg bool cf carryo;
  reg u64[4] h;
  reg u64 z;

  ?{}, z = #set0();

  h = #copy(f);

  cf, h[0] -= gs[0];
  for i=1 to 4
  { cf, h[i] -= gs[i] - cf; }

  carryo = cf;
  _, z -= z - cf;
  #[kind=Assert, prover=smt] assert (cf == carryo);
  #[kind=Assume, prover=cas] assert (b2i(cf) ==  b2i(carryo));
  
  z &= 38;
  
  #[kind=Assert, prover=smt] assert ((!cf && z == 0x0) || (cf && z == 0x26));
  #[kind=Assume, prover=cas] assert (u64i(z) == b2i(cf)*0x26);

  cf, h[0] -= z;
  for i=1 to 4
  { cf, h[i] -= 0 - cf; }

  carryo = cf;
  _, z -= z - cf;
  #[kind=Assert, prover=smt] assert (cf == carryo);
  #[kind=Assume, prover=cas] assert (b2i(cf) ==  b2i(carryo));
  
  z &= 38;
  
  #[kind=Assert, prover=smt] assert ((!cf && z == 0x0) || (cf && z == 0x26));
  #[kind=Assume, prover=cas] assert (u64i(z) == b2i(cf)*0x26);
  
  cf, h[0] -= z;
  
  #[kind=Assert, prover=smt] assert (!cf);
  #[kind=Assume, prover=cas] assert (b2i(cf) == 0);

  return h;
}

inline fn __sub4_rrr(reg u64[4] f, reg u64[4] g) -> reg u64[4]
  ensures #[prover=cas] {
  eqmod (
     \sum (ii \in 0:4) (pow(2, 64*ii)*u64i(result.0[ii])),
     \sum (ii \in 0:4) (pow(2, 64*ii)*u64i(f[ii])) - \sum (ii \in 0:4) (pow(2, 64*ii)*u64i(g[ii])),
     single((pow(2,255)) - 19)
    )
  }
{
  inline int i;
  reg bool carryo cf;
  reg u64 z;

  ?{}, z = #set0();

  cf, f[0] -= g[0];
  for i=1 to 4
  { cf, f[i] -= g[i] - cf; }

  carryo = cf;
  _, z -= z - cf;
  #[kind=Assert, prover=smt] assert (cf == carryo);
  #[kind=Assume, prover=cas] assert (b2i(cf) ==  b2i(carryo));
  
  z &= 38;
  
  #[kind=Assert, prover=smt] assert ((!cf && z == 0x0) || (cf && z == 0x26));
  #[kind=Assume, prover=cas] assert (u64i(z) == b2i(cf)*0x26);

  cf, f[0] -= z;
  for i=1 to 4
  { cf, f[i] -= 0 - cf; }

  carryo = cf;
  _, z -= z - cf;
  #[kind=Assert, prover=smt] assert (cf == carryo);
  #[kind=Assume, prover=cas] assert (b2i(cf) ==  b2i(carryo));
  
  z &= 38;
  
  #[kind=Assert, prover=smt] assert ((!cf && z == 0x0) || (cf && z == 0x26));
  #[kind=Assume, prover=cas] assert (u64i(z) == b2i(cf)*0x26);
  
  cf, f[0] -= z;
  #[kind=Assert, prover=smt] assert (!cf);
  #[kind=Assume, prover=cas] assert (b2i(cf) == 0);

  return f;
}


inline fn __sub4_srr(reg u64[4] f, reg u64[4] g) -> stack u64[4]
{
	reg u64[4] h;
	stack u64[4] hs;
	
	h = __sub4_rrr(f, g);
	hs = #copy(h);
	
	return hs;
}


inline fn __sub4_rrs(reg u64[4] f, stack u64[4] gs) -> reg u64[4]
  ensures #[prover=cas] {
  eqmod (
     \sum (ii \in 0:4) (pow(2, 64*ii)*u64i(result.0[ii])),
     \sum (ii \in 0:4) (pow(2, 64*ii)*u64i(f[ii])) - \sum (ii \in 0:4) (pow(2, 64*ii)*u64i(gs[ii])),
     single((pow(2,255)) - 19)
    )
  }
{
  inline int i;
  reg bool carryo cf;
  reg u64[4] h;
  reg u64 z;

  ?{}, z = #set0();

  h = #copy(f);

  cf, h[0] -= gs[0];
  for i=1 to 4
  { cf, h[i] -= gs[i] - cf; }

  carryo = cf;
  _, z -= z - cf;
  #[kind=Assert, prover=smt] assert (cf == carryo);
  #[kind=Assume, prover=cas] assert (b2i(cf) ==  b2i(carryo));
  
  z &= 38;
  
  #[kind=Assert, prover=smt] assert ((!cf && z == 0x0) || (cf && z == 0x26));
  #[kind=Assume, prover=cas] assert (u64i(z) == b2i(cf)*0x26);

  cf, h[0] -= z;
  for i=1 to 4
  { cf, h[i] -= 0 - cf; }

  carryo = cf;
  _, z -= z - cf;
  #[kind=Assert, prover=smt] assert (cf == carryo);
  #[kind=Assume, prover=cas] assert (b2i(cf) ==  b2i(carryo));
  
  z &= 38;
  
  #[kind=Assert, prover=smt] assert ((!cf && z == 0x0) || (cf && z == 0x26));
  #[kind=Assume, prover=cas] assert (u64i(z) == b2i(cf)*0x26);
  
  cf, h[0] -= z;
  #[kind=Assert, prover=smt] assert (!cf);
  #[kind=Assume, prover=cas] assert (b2i(cf) == 0);

  return h;
}

inline fn __sub4_sss(stack u64[4] fs gs) -> stack u64[4]
{
  stack u64[4] hs;
  reg u64[4] h f;

  f = #copy(fs);
  h = __sub4_rrs(f, gs);
  hs = #copy(h);

  return hs;
}

inline fn __sub4_rss(stack u64[4] fs gs) -> reg u64[4]
{
  reg u64[4] h f;

  f = #copy(fs);
  h = __sub4_rrs(f, gs);

  return h;
}

inline fn __sub4_rsr(stack u64[4] fs, reg u64[4] g) -> reg u64[4]
  ensures #[prover=cas] {
  eqmod (
     \sum (ii \in 0:4) (pow(2, 64*ii)*u64i(result.0[ii])),
     \sum (ii \in 0:4) (pow(2, 64*ii)*u64i(fs[ii])) - \sum (ii \in 0:4) (pow(2, 64*ii)*u64i(g[ii])),
     single((pow(2,255)) - 19)
    )
  }
{
  inline int i;
  reg bool carryo cf;
  reg u64[4] h;
  reg u64 z;

  ?{}, z = #set0();

  h = #copy(fs);

  cf, h[0] -= g[0];
  for i=1 to 4
  { cf, h[i] -= g[i] - cf; }

  carryo = cf;
  _, z -= z - cf;
  #[kind=Assert, prover=smt] assert (cf == carryo);
  #[kind=Assume, prover=cas] assert (b2i(cf) ==  b2i(carryo));
  
  z &= 38;
  
  #[kind=Assert, prover=smt] assert ((!cf && z == 0x0) || (cf && z == 0x26));
  #[kind=Assume, prover=cas] assert (u64i(z) == b2i(cf)*0x26);

  cf, h[0] -= z;
  for i=1 to 4
  { cf, h[i] -= 0 - cf; }

  carryo = cf;
  _, z -= z - cf;
  #[kind=Assert, prover=smt] assert (cf == carryo);
  #[kind=Assume, prover=cas] assert (b2i(cf) ==  b2i(carryo));
  
  z &= 38;
  
  #[kind=Assert, prover=smt] assert ((!cf && z == 0x0) || (cf && z == 0x26));
  #[kind=Assume, prover=cas] assert (u64i(z) == b2i(cf)*0x26);
  
  cf, h[0] -= z;
  #[kind=Assert, prover=smt] assert (!cf);
  #[kind=Assume, prover=cas] assert (b2i(cf) == 0);

  return h;
}

inline fn __sub4_ssr(stack u64[4] fs, reg u64[4] g) -> stack u64[4]
{
  stack u64[4] hs;
  reg u64[4] h;

  h = __sub4_rsr(fs, g);
  hs = #copy(h);

  return hs;
}

