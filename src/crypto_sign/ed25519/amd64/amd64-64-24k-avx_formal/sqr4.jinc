require "reduce4.jinc"

abstract predicate bool eqmod(int, int, tuple);
abstract predicate tuple single(int);
abstract predicate int b2i(bool);
abstract predicate int u64i(u64);
abstract predicate int pow(int, int);

fn __sqr4_rr(reg u64[4] f)-> reg u64[4]
	ensures #[prover=cas] {
  eqmod (
     \sum (ii \in 0:4) (pow(2, 64*ii)*u64i(result.0[ii])),
     \sum (ii \in 0:4) (pow(2, 64*ii)*u64i(f[ii])) * \sum (ii \in 0:4) (pow(2, 64*ii)*u64i(f[ii])),
     single((pow(2,255)) - 19)
    )
  }
{
	reg bool cf of;
  reg u64[8] t;
  reg u64[4] h r;
  reg u64 z _38 fx;
  of, cf, _, _, _, z = #set0();
  
  // 0
  fx = f[0];

  (t[1], h[0]) = #MULX ( fx,   fx       ); // f0*f0
  (h[2], h[1]) = #MULX ( fx,   f[1]     ); // f0*f1

  (h[3], t[2]) = #MULX ( fx,   f[2]     ); // f0*f2
     cf, h[2]  = #ADCX ( h[2], t[2], cf );

  (r[0], t[3]) = #MULX ( fx,   f[3]     ); // f0*f3
     cf, h[3]  = #ADCX ( h[3], t[3], cf );

  // 1
  fx = f[1];

  (t[4], t[3]) = #MULX ( fx,   f[2]     ); // f1*f2

  of, h[3]     = #ADOX ( h[3], t[3], of );
  cf, r[0]     = #ADCX ( r[0], t[4], cf );
  
  (r[1], t[4]) = #MULX ( fx,   f[3]     ); // f1*f3
     of, r[0]  = #ADOX ( r[0], t[4], of );
   
  (t[3], t[2]) = #MULX ( fx,   fx       ); // f1*f1

  // 2
  fx = f[2];

  (r[2], t[5]) = #MULX ( fx,   f[3]     ); // f2*f3

   cf, r[1]    = #ADCX ( r[1], t[5], cf );
   of, r[1]    = #ADOX ( r[1], z,    of );

   cf, r[2]    = #ADCX ( r[2], z,    cf ); // cf = 0
   of, r[2]    = #ADOX ( r[2], z,    of ); // of = 0 ?? TODO: VERIFYME
   
   #[kind=Assert, prover=smt] assert (!cf);
   #[kind=Assume, prover=cas] assert (b2i(cf) == 0);
   #[kind=Assert, prover=smt] assert (!of);
   #[kind=Assume, prover=cas] assert (b2i(of) == 0);

  (t[5], t[4]) = #MULX ( fx,   fx       ); // f2*f2

  // 3
  fx = f[3];

  (r[3], t[6]) = #MULX ( fx,   fx       ); // f3*f3

  //
  cf, h[1] = #ADCX ( h[1], h[1], cf );
  of, h[1] = #ADOX ( h[1], t[1], of );

  cf, h[2] = #ADCX ( h[2], h[2], cf );
  of, h[2] = #ADOX ( h[2], t[2], of );

  cf, h[3] = #ADCX ( h[3], h[3], cf );
  of, h[3] = #ADOX ( h[3], t[3], of );

  cf, r[0] = #ADCX ( r[0], r[0], cf );
  of, r[0] = #ADOX ( r[0], t[4], of );

  cf, r[1] = #ADCX ( r[1], r[1], cf );
  of, r[1] = #ADOX ( r[1], t[5], of );

  cf, r[2] = #ADCX ( r[2], r[2], cf );
  of, r[2] = #ADOX ( r[2], t[6], of );

  cf, r[3] = #ADCX ( r[3], z,    cf ); // cf = 0
  of, r[3] = #ADOX ( r[3], z,    of ); // of = 0 ?? TODO: VERIFYME
  
  #[kind=Assert, prover=smt] assert (!cf);
  #[kind=Assume, prover=cas] assert (b2i(cf) == 0);
  #[kind=Assert, prover=smt] assert (!of);
  #[kind=Assume, prover=cas] assert (b2i(of) == 0);
  
  #[kind=Assert, prover=cas] assert (
		(\sum (ii \in 0:4) (pow(2, 64*ii)*u64i(h[ii])) + \sum (ii \in 0:4) (pow(2, 64*(ii+4))*u64i(r[ii]))) ==
    (\sum (ii \in 0:4) (pow(2, 64*ii)*u64i(f[ii])) * \sum (ii \in 0:4) (pow(2, 64*ii)*u64i(f[ii])))
  );

  _38 = 38;
  h = __reduce4(h, r, _38, z, cf, of);
  
	return h;
}

fn __sqr5_rr(reg u64[4] g) -> reg u64[5]
	ensures #[prover=cas] {
  eqmod (
     \sum (ii \in 0:5) (pow(2, 64*ii)*u64i(result.0[ii])),
     \sum (ii \in 0:4) (pow(2, 64*ii)*u64i(g[ii])) * \sum (ii \in 0:4) (pow(2, 64*ii)*u64i(g[ii])),
     single((pow(2,255)) - 19)
    )
  }
{
  reg bool cf of;
  reg u64[5] o;
  reg u64[8] t h;
  reg u64 z _38 rdx;
  of, cf, _, _, _, z = #set0();
  
  // 0
  rdx = g[0];

  (h[2], h[1]) = #MULX ( rdx,  g[1]     ); // f0*f1
  (h[3], t[2]) = #MULX ( rdx,  g[2]     ); // f0*f2
		  cf, h[2] = #ADCX ( h[2], t[2], cf	);
	
  (h[4], t[3]) = #MULX ( rdx,  g[3]     ); // f0*f3
     cf, h[3]  = #ADCX ( h[3], t[3], cf );


  // 1
  rdx = g[1];

  (t[4], t[3]) = #MULX ( rdx,  g[2]     ); // f1*f2

  of, h[3]     = #ADOX ( h[3], t[3], of );
  cf, h[4]     = #ADCX ( h[4], t[4], cf );
  
  (h[5], t[4]) = #MULX ( rdx,   g[3]     ); // f1*f3
     of, h[4]  = #ADOX ( h[4], t[4], of );

  // 2
  rdx = g[2];

  (h[6], t[5]) = #MULX ( rdx,   g[3]     ); // f2*f3

   cf, h[5]    = #ADCX ( h[5], t[5], cf );
   of, h[5]    = #ADOX ( h[5], z,    of );

   cf, h[6]    = #ADCX ( h[6], z,    cf ); // cf = 0
   of, h[6]    = #ADOX ( h[6], z,    of ); // of = 0 ?? TODO: VERIFYME
   
  #[kind=Assert, prover=smt] assert (!cf);
  #[kind=Assume, prover=cas] assert (b2i(cf) == 0);
  #[kind=Assert, prover=smt] assert (!of);
  #[kind=Assume, prover=cas] assert (b2i(of) == 0);

	h[7] = 0;
	_, _, _, _, _, h[7] = #SHLD(h[7], h[6], 1);
	_, _, _, _, _, h[6] = #SHLD(h[6], h[5], 1);
	_, _, _, _, _, h[5] = #SHLD(h[5], h[4], 1);
	_, _, _, _, _, h[4] = #SHLD(h[4], h[3], 1);
	_, _, _, _, _, h[3] = #SHLD(h[3], h[2], 1);
	_, _, _, _, _, h[2] = #SHLD(h[2], h[1], 1);
	_, cf, _, _, _, h[1] = #SHL(h[1], 1);
	
	#[kind=Assert, prover=smt] assert (!cf);
  #[kind=Assume, prover=cas] assert (b2i(cf) == 0);
	
  // 0
  rdx = g[0];
  (t[1], h[0]) = #MULX ( rdx,   rdx     ); // f0*f0
  cf, h[1] += t[1];
  
  // 1
  rdx = g[1];
  (t[3], t[2]) = #MULX ( rdx,   rdx     ); // f1*f1
  cf, h[2] += t[2] + cf;
  cf, h[3] += t[3] + cf;
  
  // 2
  rdx = g[2];
  (t[5], t[4]) = #MULX ( rdx,   rdx     ); // f2*f2
  cf, h[4] += t[4] + cf;
  cf, h[5] += t[5] + cf;
  
  // 3
  rdx = g[3];
  (t[7], t[6]) = #MULX ( rdx,   rdx     ); // f3*f3
  cf, h[6] += t[6] + cf;
  cf, h[7] += t[7] + cf;
  
  #[kind=Assert, prover=smt] assert (!cf);
  #[kind=Assume, prover=cas] assert (b2i(cf) == 0);
  
  // Reduce
  _38 = 38;
  (t[5], h[4]) = #MULX ( _38,   h[4]    );
  (t[6], h[5]) = #MULX ( _38,   h[5]    );
  cf, h[5] 		 += t[5];
  
  (t[7], h[6]) = #MULX ( _38,  h[6]     );
  cf, h[6]     = #ADCX ( h[6], t[6], cf );
  
  (o[4], h[7]) = #MULX ( _38,  h[7]     );
  cf, h[7]     = #ADCX ( h[7], t[7], cf );
  cf, o[4]     = #ADCX ( o[4],    z, cf );
  
  #[kind=Assert, prover=smt] assert (!cf);
  #[kind=Assume, prover=cas] assert (b2i(cf) == 0);
  
  // Final add
  cf, o[0] = h[0] + h[4];
  cf, o[1] = h[1] + h[5] + cf;
  cf, o[2] = h[2] + h[6] + cf;
  cf, o[3] = h[3] + h[7] + cf;
  cf, o[4] = o[4] + 0 + cf;
  
  #[kind=Assert, prover=smt] assert (!cf);
  #[kind=Assume, prover=cas] assert (b2i(cf) == 0);
  
  return o;
}

fn __sqr5_rp(reg ptr u64[4] g) -> reg u64[5]
	ensures #[prover=cas] {
  eqmod (
     \sum (ii \in 0:5) (pow(2, 64*ii)*u64i(result.0[ii])),
     \sum (ii \in 0:4) (pow(2, 64*ii)*u64i(g[ii])) * \sum (ii \in 0:4) (pow(2, 64*ii)*u64i(g[ii])),
     single((pow(2,255)) - 19)
    )
  }
{
  reg bool cf of;
  reg u64[5] o;
  reg u64[8] t h;
  reg u64 z _38 rdx;
  of, cf, _, _, _, z = #set0();
  
  // 0
  rdx = g[0];

  (h[2], h[1]) = #MULX ( rdx,  g[1]     ); // f0*f1
  (h[3], t[2]) = #MULX ( rdx,  g[2]     ); // f0*f2
		  cf, h[2] = #ADCX ( h[2], t[2], cf	);
	
  (h[4], t[3]) = #MULX ( rdx,  g[3]     ); // f0*f3
     cf, h[3]  = #ADCX ( h[3], t[3], cf );


  // 1
  rdx = g[1];

  (t[4], t[3]) = #MULX ( rdx,  g[2]     ); // f1*f2

  of, h[3]     = #ADOX ( h[3], t[3], of );
  cf, h[4]     = #ADCX ( h[4], t[4], cf );
  
  (h[5], t[4]) = #MULX ( rdx,   g[3]     ); // f1*f3
     of, h[4]  = #ADOX ( h[4], t[4], of );

  // 2
  rdx = g[2];

  (h[6], t[5]) = #MULX ( rdx,   g[3]     ); // f2*f3

   cf, h[5]    = #ADCX ( h[5], t[5], cf );
   of, h[5]    = #ADOX ( h[5], z,    of );

   cf, h[6]    = #ADCX ( h[6], z,    cf ); // cf = 0
   of, h[6]    = #ADOX ( h[6], z,    of ); // of = 0 ?? TODO: VERIFYME
   
  #[kind=Assert, prover=smt] assert (!cf);
  #[kind=Assume, prover=cas] assert (b2i(cf) == 0);
  #[kind=Assert, prover=smt] assert (!of);
  #[kind=Assume, prover=cas] assert (b2i(of) == 0);

	h[7] = 0;
	_, _, _, _, _, h[7] = #SHLD(h[7], h[6], 1);
	_, _, _, _, _, h[6] = #SHLD(h[6], h[5], 1);
	_, _, _, _, _, h[5] = #SHLD(h[5], h[4], 1);
	_, _, _, _, _, h[4] = #SHLD(h[4], h[3], 1);
	_, _, _, _, _, h[3] = #SHLD(h[3], h[2], 1);
	_, _, _, _, _, h[2] = #SHLD(h[2], h[1], 1);
	_, cf, _, _, _, h[1] = #SHL(h[1], 1);
	
	#[kind=Assert, prover=smt] assert (!cf);
  #[kind=Assume, prover=cas] assert (b2i(cf) == 0);
	
  // 0
  rdx = g[0];
  (t[1], h[0]) = #MULX ( rdx,   rdx     ); // f0*f0
  cf, h[1] += t[1];
  
  // 1
  rdx = g[1];
  (t[3], t[2]) = #MULX ( rdx,   rdx     ); // f1*f1
  cf, h[2] += t[2] + cf;
  cf, h[3] += t[3] + cf;
  
  // 2
  rdx = g[2];
  (t[5], t[4]) = #MULX ( rdx,   rdx     ); // f2*f2
  cf, h[4] += t[4] + cf;
  cf, h[5] += t[5] + cf;
  
  // 3
  rdx = g[3];
  (t[7], t[6]) = #MULX ( rdx,   rdx     ); // f3*f3
  cf, h[6] += t[6] + cf;
  cf, h[7] += t[7] + cf;
  
  #[kind=Assert, prover=smt] assert (!cf);
  #[kind=Assume, prover=cas] assert (b2i(cf) == 0);
  
  // Reduce
  _38 = 38;
  (t[5], h[4]) = #MULX ( _38,   h[4]    );
  (t[6], h[5]) = #MULX ( _38,   h[5]    );
  cf, h[5] 		 += t[5];
  
  (t[7], h[6]) = #MULX ( _38,  h[6]     );
  cf, h[6]     = #ADCX ( h[6], t[6], cf );
  
  (o[4], h[7]) = #MULX ( _38,  h[7]     );
  cf, h[7]     = #ADCX ( h[7], t[7], cf );
  cf, o[4]     = #ADCX ( o[4],    z, cf );
  
  #[kind=Assert, prover=smt] assert (!cf);
  #[kind=Assume, prover=cas] assert (b2i(cf) == 0);
  
  // Final add
  cf, o[0] = h[0] + h[4];
  cf, o[1] = h[1] + h[5] + cf;
  cf, o[2] = h[2] + h[6] + cf;
  cf, o[3] = h[3] + h[7] + cf;
  cf, o[4] = o[4] + 0 + cf;
  
  #[kind=Assert, prover=smt] assert (!cf);
  #[kind=Assume, prover=cas] assert (b2i(cf) == 0);
  
  return o;
}

/*fn __it_sqr4_x2(reg u64[4] f, reg u32 i, #msf reg u64 msf) -> reg u64[4], #msf reg u64
{
  reg bool zf;
  reg u64[4] h;
  stack u32 _i;
  reg bool cond;
  #mmx reg u64 msf_s;
  
  msf_s = #mov_msf(msf);
  
  while{cond = (i != 0); msf = #mov_msf(msf_s);}(cond)
  { 
  	msf = #update_msf(cond, msf);
  	msf_s = #mov_msf(msf);
  	
  	_i = i;

    h = __sqr4_rr(f);
    f = __sqr4_rr(h);
		
    i = _i;
    _,_,_,zf,i = #DEC_32(i);
  }
  msf = #mov_msf(msf_s);
	msf = #update_msf(!cond, msf);
	
  return f, msf;
}*/

inline fn __sqr4_ss(stack u64[4] fs) -> stack u64[4]
{
  stack u64[4] hs;
  reg u64[4] f h;

  f = #copy(fs);
  h = __sqr4_rr(f);
  hs = #copy(h);

  return hs;
}

inline fn __sqr4_sr(reg u64[4] f) -> stack u64[4]
{
  stack u64[4] hs;
  reg u64[4] h;

  h = __sqr4_rr(f);
  hs = #copy(h);

  return hs;
}

inline fn __sqr4_rs(stack u64[4] fs) -> reg u64[4]
{
  reg u64[4] f h;

  f = #copy(fs);
  h = __sqr4_rr(f);

  return h;
}
