require "shared_const.jinc"

abstract predicate bool eqmod(int, int, tuple);
abstract predicate tuple single(int);
abstract predicate int b2i(bool);
abstract predicate int u64i(u64);
abstract predicate int pow(int, int);

fn sc25519_add_rrs(reg u64[4] r, reg u64[4] y) -> reg u64[4]
	requires #[prover=smt] {r[3] <u 0x2000000000000000}
	requires #[prover=smt] {y[3] <u 0x2000000000000000}
	ensures #[prover=cas] {
  eqmod (
     \sum (ii \in 0:4) (pow(2, 64*ii)*u64i(result.0[ii])),
     \sum (ii \in 0:4) (pow(2, 64*ii)*u64i(r[ii])) + \sum (ii \in 0:4) (pow(2, 64*ii)*u64i(y[ii])),
     single((pow(2,252)) + 27742317777372353535851937790883648493)
    )
  }
{
	reg bool cf;
	reg u64[4] t;
	
	cf, r[0] += y[0];
	cf, r[1] += y[1] + cf;
	cf, r[2] += y[2] + cf;
	cf, r[3] += y[3] + cf;
	
	#[kind=Assert, prover=smt] assert (!cf);
	#[kind=Assume, prover=cas] assert (b2i(cf) == 0);
	
	t = #copy(r);
	
	cf, t[0] -= L[0];
	cf, t[1] -= L[1] - cf;
	cf, t[2] -= L[2] - cf;
	cf, t[3] -= L[3] - cf;
	
	r[0] = #CMOVcc(!cf, t[0], r[0]);
	r[1] = #CMOVcc(!cf, t[1], r[1]);
	r[2] = #CMOVcc(!cf, t[2], r[2]);
	r[3] = #CMOVcc(!cf, t[3], r[3]);
	
	return r;
}
