require "shared_const.jinc"

abstract predicate bool eqmod(int, int, tuple);
abstract predicate tuple single(int);
abstract predicate int b2i(bool);
abstract predicate int u64i(u64);
abstract predicate int pow(int, int);

inline fn __barrett_c0
( reg u64    x3,
  reg u64[6] q,
  reg u64    z, // zero
  reg bool   cf of // cf = 0 and of = 0
  ) ->
  reg u64[6],
  reg bool,
  reg bool
{
  reg u64 c;

	(c, q[0]) 		= #MULX ( x3, mu[3] );
	(q[2], q[1]) 	= #MULX ( x3, mu[4] );
	cf, q[1]   		= #ADCX ( q[1], c, cf );
	cf, q[2]   		= #ADCX ( q[2], z, cf );
	
	#[kind=Assert, prover=smt] assert (!cf);
  #[kind=Assume, prover=cas] assert (b2i(cf) == 0);

  return q, cf, of;
}

inline fn __barrett_c1
( reg u64    x4,
  reg u64[6] q,
  reg u64    z, // zero
  reg bool   cf of // cf = 0 and of = 0
  ) ->
  reg u64[6],
  reg bool,
  reg bool
{
  reg u64 c rax;

	(c, rax) 		= #MULX ( x4, mu[2] );
	of, q[0]		= #ADOX ( q[0], rax, of );
  cf, q[1]		= #ADCX ( q[1], c, cf );
  
	(c, rax) 		= #MULX ( x4, mu[3] );
	of, q[1]    = #ADOX ( q[1], rax, of );
  cf, q[2]    = #ADCX ( q[2], c, cf );
  
	(q[3], rax)	= #MULX ( x4, mu[4] );
	of, q[2]   	= #ADOX ( q[2], rax, of );
	
	cf, q[3]   	= #ADCX ( q[3], z, cf );
	of, q[3]   	= #ADOX ( q[3], z, of );

  #[kind=Assert, prover=smt] assert (!cf);
  #[kind=Assume, prover=cas] assert (b2i(cf) == 0);
  #[kind=Assert, prover=smt] assert (!of);
  #[kind=Assume, prover=cas] assert (b2i(of) == 0);
  
  return q, cf, of;
}

inline fn __barrett_c2
( reg u64    x5,
  reg u64[6] q,
  reg u64    z, // zero
  reg bool   cf of // cf = 0 and of = 0
  ) ->
  reg u64[6],
  reg bool,
  reg bool
{
  reg u64 c rax;

	(c, rax) 		= #MULX ( x5, mu[1] );
	of, q[0]    = #ADOX ( q[0], rax, of );
  cf, q[1]    = #ADCX ( q[1], c, cf );
  
	(c, rax) 		= #MULX ( x5, mu[2] );
	of, q[1]    = #ADOX ( q[1], rax, of );
  cf, q[2]    = #ADCX ( q[2], c, cf );
  
  (c, rax) 		= #MULX ( x5, mu[3] );
	of, q[2]    = #ADOX ( q[2], rax, of );
  cf, q[3]    = #ADCX ( q[3], c, cf );
  
	(q[4], rax) = #MULX ( x5, mu[4] );
	of, q[3]   	= #ADOX ( q[3], rax, of );
	
	cf, q[4]   	= #ADCX ( q[4], z, cf );
	of, q[4]   	= #ADOX ( q[4], z, of );

  #[kind=Assert, prover=smt] assert (!cf);
  #[kind=Assume, prover=cas] assert (b2i(cf) == 0);
  #[kind=Assert, prover=smt] assert (!of);
  #[kind=Assume, prover=cas] assert (b2i(of) == 0);
  
  return q, cf, of;
}

inline fn __barrett_c3
( reg u64    x6,
  reg u64[6] q,
  reg u64    z, // zero
  reg bool   cf of // cf = 0 and of = 0
  ) ->
  reg u64[6],
  reg bool,
  reg bool
{
  reg u64 c rax;

	(c, rax) 		= #MULX ( x6, mu[0] );
	of, q[0]    = #ADOX ( q[0], rax, of );
  cf, q[1]    = #ADCX ( q[1], c, cf );
  
	(c, rax) 		= #MULX ( x6, mu[1] );
	of, q[1]    = #ADOX ( q[1], rax, of );
  cf, q[2]    = #ADCX ( q[2], c, cf );
  
  (c, rax) 		= #MULX ( x6, mu[2] );
	of, q[2]    = #ADOX ( q[2], rax, of );
  cf, q[3]    = #ADCX ( q[3], c, cf );
  
  (c, rax) 		= #MULX ( x6, mu[3] );
	of, q[3]    = #ADOX ( q[3], rax, of );
  cf, q[4]    = #ADCX ( q[4], c, cf );
  
	(q[5], rax) = #MULX ( x6, mu[4] );
	of, q[4]   	= #ADOX ( q[4], rax, of );
	
	cf, q[5]   	= #ADCX ( q[5], z, cf );
	of, q[5]   	= #ADOX ( q[5], z, of );

  #[kind=Assert, prover=smt] assert (!cf);
  #[kind=Assume, prover=cas] assert (b2i(cf) == 0);
  #[kind=Assert, prover=smt] assert (!of);
  #[kind=Assume, prover=cas] assert (b2i(of) == 0);
  
  return q, cf, of;
}

inline fn __barrett_c4
( reg u64    x7,
  reg u64[6] q,
  reg u64    z, // zero
  reg bool   cf of // cf = 0 and of = 0
  ) ->
  reg u64[6],
  reg bool,
  reg bool
{
  reg u64 c rax;

	(c, rax) 		= #MULX ( x7, mu[0] );
	of, q[1]    = #ADOX ( q[1], rax, of );
  cf, q[2]    = #ADCX ( q[2], c, cf );
  
	(c, rax) 		= #MULX ( x7, mu[1] );
	of, q[2]    = #ADOX ( q[2], rax, of );
  cf, q[3]    = #ADCX ( q[3], c, cf );
  
  (c, rax) 		= #MULX ( x7, mu[2] );
	of, q[3]    = #ADOX ( q[3], rax, of );
  cf, q[4]    = #ADCX ( q[4], c, cf );
  
  (c, rax) 		= #MULX ( x7, mu[3] );
	of, q[4]    = #ADOX ( q[4], rax, of );
  cf, q[5]    = #ADCX ( q[5], c, cf );
  
	(c, rax) = #MULX ( x7, mu[4] );
	of, q[5]   	= #ADOX ( q[5], rax, of );
	
	cf, c   	= #ADCX ( c, z, cf );
	of, c   	= #ADOX ( c, z, of );

  #[kind=Assert, prover=smt] assert (!cf);
  #[kind=Assume, prover=cas] assert (b2i(cf) == 0);
  #[kind=Assert, prover=smt] assert (!of);
  #[kind=Assume, prover=cas] assert (b2i(of) == 0);
  
  return q, cf, of;
}

inline fn __mulL_c0
( reg u64    q0,
  reg u64[4] r2,
  reg u64    z, // zero
  reg bool   cf of // cf = 0 and of = 0
  ) ->
  reg u64[4],
  reg bool,
  reg bool
{
  reg u64 c rax;
  
	(r2[1], r2[0])	= #MULX ( q0, L[0] );
	(r2[2], rax) 		= #MULX ( q0, L[1] );
  cf, r2[1]   		= #ADCX ( r2[1], rax, cf );
  
  (r2[3], rax) 		= #MULX ( q0, L[2] );
  cf, r2[2]   		= #ADCX ( r2[2], rax, cf );
  
  (c, rax) 				= #MULX ( q0, L[3] );
  cf, r2[3]   		= #ADCX ( r2[3], rax, cf );
  
  #[kind=Assert, prover=smt] assert (!cf);
  #[kind=Assume, prover=cas] assert (b2i(cf) == 0);

  return r2, cf, of;
}

inline fn __mulL_c1
( reg u64    q1,
  reg u64[4] r2,
  reg u64    z, // zero
  reg bool   cf of // cf = 0 and of = 0
  ) ->
  reg u64[4],
  reg bool,
  reg bool
{
  reg u64 c rax;

	(c, rax)		= #MULX ( q1, L[0] );
	of, r2[1]		= #ADOX ( r2[1], rax, of );
  cf, r2[2]		= #ADCX ( r2[2], c, cf );
  
  (c, rax)		= #MULX ( q1, L[1] );
	of, r2[2]		= #ADOX ( r2[2], rax, of );
  cf, r2[3]		= #ADCX ( r2[3], c, cf );
  
  (c, rax)		= #MULX ( q1, L[2] );
	of, r2[3]		= #ADOX ( r2[3], rax, of );

  return r2, cf, of;
}

inline fn __mulL_c2
( reg u64    q2,
  reg u64[4] r2,
  reg u64    z, // zero
  reg bool   cf of // cf = 0 and of = 0
  ) ->
  reg u64[4],
  reg bool,
  reg bool
{
  reg u64 c rax;
	(c, rax)		= #MULX ( q2, L[0] );
	of, r2[2]		= #ADOX ( r2[2], rax, of );
  cf, r2[3]		= #ADCX ( r2[3], c, cf );
  
  (c, rax)		= #MULX ( q2, L[1] );
	of, r2[3]		= #ADOX ( r2[3], rax, of );

  return r2, cf, of;
}

fn sc25519_barrett(reg u64[8] x) -> reg u64[4]
	ensures #[prover=cas] {
  eqmod (
     \sum (ii \in 0:4) (pow(2, 64*ii)*u64i(result.0[ii])),
     \sum (ii \in 0:8) (pow(2, 64*ii)*u64i(x[ii])),
     single((pow(2,252)) + 27742317777372353535851937790883648493)
    )
  }
{
	reg u64 z rax rdx c;
	reg u64[4] r r2 t;
	reg u64[6] q;
	stack u64[4] q3s;
	reg bool cf of;
	inline int i;
	
	?{CF=cf, OF=of}, z = #set0();
	
	// Multiply with mu
	// Multiply 3rd limb
	rdx = x[3];
	q, cf, of = __barrett_c0(rdx, q, z, cf, of);
	
	// Multiply 4th limb
	rdx = x[4];
	q, cf, of = __barrett_c1(rdx, q, z, cf, of);
	
	// Multiply 5th limb
	rdx = x[5];
	q, cf, of = __barrett_c2(rdx, q, z, cf, of);
	
	// Multiply 6th limb
	rdx = x[6];
	q, cf, of = __barrett_c3(rdx, q, z, cf, of);
	
	// Multiply 7th limb
	rdx = x[7];
	q, cf, of = __barrett_c4(rdx, q, z, cf, of);
	
	for i=0 to 4{
		q3s[i] = q[2+i];
	}
	
	// Multiply with L for final reduction
	// First limb
	rdx = q3s[0];
	r2, cf, of = __mulL_c0(rdx, r2, z, cf, of);
	
	// Second limb
	rdx = q3s[1];
	r2, cf, of = __mulL_c1(rdx, r2, z, cf, of);
	
	// Third limb
	?{CF=cf, OF=of}, z = #set0();
	rdx = q3s[2];
	r2, cf, of = __mulL_c2(rdx, r2, z, cf, of);
	
	rax = q3s[3];
	rdx, rax = rax * L[0];
	cf, r2[3] += rax;
	
	r[0] = x[0];
	cf, r[0] -= r2[0];
	t[0] = r[0];
	
	for i=1 to 4
	{
		r[i] = x[i];
		cf, r[i] -= r2[i] - cf;
		t[i] = r[i];
	}
	
	// Should be correct from here on
	cf, t[0] -= L[0];
	cf, t[1] -= L[1] - cf;
	cf, t[2] -= L[2] - cf;
	cf, t[3] -= L[3] - cf;
	
	for i=0 to 4
	{
		r[i] = #CMOVcc(!cf, t[i], r[i]);
		t[i] = r[i];
	}
	
	cf, t[0] -= L[0];
	cf, t[1] -= L[1] - cf;
	cf, t[2] -= L[2] - cf;
	cf, t[3] -= L[3] - cf;
	
	for i=0 to 4
	{
		r[i] = #CMOVcc(!cf, t[i], r[i]);
	}
	
	return r;
}

fn sc25519_barrett_p(reg ptr u64[8] x) -> reg u64[4]
	/*ensures #[prover=smt] {
		result.0[3] == 0x1000000000000000 && result.0[2] == 0 && result.0[1] == 0x14DEF9DEA2F79CD6 && result.0[0] <64u 0x5812631A5CF5D3ED||
		result.0[3] == 0x1000000000000000 && result.0[2] == 0 && result.0[1] <64u 0x14DEF9DEA2F79CD6 ||
		result.0[3] <64u 0x1000000000000000
	}*/
	ensures #[prover=cas] {
  eqmod (
     \sum (ii \in 0:4) (pow(2, 64*ii)*u64i(result.0[ii])),
     \sum (ii \in 0:8) (pow(2, 64*ii)*u64i(x[ii])),
     single((pow(2,252)) + 27742317777372353535851937790883648493)
    )
  }
{
	reg u64 z rax rdx c;
	reg u64[4] r r2 t t2;
	reg u64[6] q;
	stack u64[4] q3s;
	reg bool cf of;
	inline int i;
	
	?{CF=cf, OF=of}, z = #set0();
	for i=0 to 6{
		?{}, q[i] = #set0();
	}
	
	// Multiply with mu
	// Multiply 3rd limb
	rdx = x[3];
	q, cf, of = __barrett_c0(rdx, q, z, cf, of);
	
	// Multiply 4th limb
	rdx = x[4];
	q, cf, of = __barrett_c1(rdx, q, z, cf, of);
  
	// Multiply 5th limb
	rdx = x[5];
	q, cf, of = __barrett_c2(rdx, q, z, cf, of);
  
	// Multiply 6th limb
	rdx = x[6];
	q, cf, of = __barrett_c3(rdx, q, z, cf, of);
  
	// Multiply 7th limb
	rdx = x[7];
	q, cf, of = __barrett_c4(rdx, q, z, cf, of);
	
	for i=0 to 4{
		q3s[i] = q[2+i];
	}
  
	// Multiply with L for final reduction
	// First limb
	rdx = q3s[0];
	r2, cf, of = __mulL_c0(rdx, r2, z, cf, of);
	
	// Second limb
	rdx = q3s[1];
	r2, cf, of = __mulL_c1(rdx, r2, z, cf, of);
	
	// Third limb
	?{CF=cf, OF=of}, z = #set0();
	rdx = q3s[2];
	r2, cf, of = __mulL_c2(rdx, r2, z, cf, of);
	
	rax = q3s[3];
	rdx, rax = rax * L[0];
	
	cf, r2[3] += rax;
	
  #[kind=Assert, prover=cas] assert (
    eqmod (
			(\sum (ii \in 0:4) (pow(2, 64*ii)*u64i(q3s[ii]))) * (\sum (ii \in 0:4) (pow(2, 64*ii)*u64i(L[ii]))),
		  \sum (ii \in 0:4) (pow(2, 64*ii)*u64i(r2[ii])),
		  single((pow(2,256)))
    )
  );
  
	r[0] = x[0];
	cf, r[0] -= r2[0];
	t[0] = r[0];
	
	for i=1 to 4
	{
		r[i] = x[i];
		cf, r[i] -= r2[i] - cf;
		t[i] = r[i];
	}
	
	t2 = #copy(r);
	
	
	#[kind=Assert, prover=smt] assert (
			((\sum (ii \in 0:8) (pow(2, 64*ii)*u64i(x[ii]))) - (\sum (ii \in 0:4) (pow(2, 64*ii)*u64i(q3s[ii]))) * (\sum (ii \in 0:4) (pow(2, 64*ii)*u64i(L[ii])))) < pow(2,256)
  );
	#[kind=Assert, prover=cas] assert (
    eqmod (
			(\sum (ii \in 0:4) (pow(2, 64*ii)*u64i(x[ii]))) - (\sum (ii \in 0:4) (pow(2, 64*ii)*u64i(q3s[ii]))) * (\sum (ii \in 0:4) (pow(2, 64*ii)*u64i(L[ii]))),
		  \sum (ii \in 0:4) (pow(2, 64*ii)*u64i(r[ii])),
		  single((pow(2,256)))
    )
  );
	
	cf, t[0] -= L[0];
	cf, t[1] -= L[1] - cf;
	cf, t[2] -= L[2] - cf;
	cf, t[3] -= L[3] - cf;
	
	for i=0 to 4
	{
		r[i] = #CMOVcc(!cf, t[i], r[i]);
		t[i] = r[i];
	}
	
	cf, t[0] -= L[0];
	cf, t[1] -= L[1] - cf;
	cf, t[2] -= L[2] - cf;
	cf, t[3] -= L[3] - cf;
	
	for i=0 to 4
	{
		r[i] = #CMOVcc(!cf, t[i], r[i]);
	}
	#[kind=Assert, prover=cas] assert (
    eqmod (
			\sum (ii \in 0:4) (pow(2, 64*ii)*u64i(t2[ii])),
		  \sum (ii \in 0:4) (pow(2, 64*ii)*u64i(r[ii])),
		  single((pow(2,252)) + 27742317777372353535851937790883648493)
    )
  );
	
	return r;
}
