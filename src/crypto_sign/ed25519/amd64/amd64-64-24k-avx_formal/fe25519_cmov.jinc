fn __cmov4_rrrr(reg u64[4] a, reg u64[4] b, reg u64 wantmont) -> reg u64[4]
	requires #[prover=smt] {wantmont==0 || wantmont==1}
	ensures #[prover=smt] {
     (\all (ii \in 0:4) (result.0[ii] == a[ii])) && wantmont==0 ||
     (\all (ii \in 0:4) (result.0[ii] == b[ii])) && wantmont==1
  }
{
	reg bool e;
	inline int i;
	
	?{"==" = e} = #CMP_64(wantmont, 1);
	
	for i=0 to 4
	{
		a[i] = #CMOVcc(e, b[i], a[i]);
	}
	
	return a;
}

inline fn __cmov4_rsrs(stack u64[4] as, reg u64[4] b, stack u64 wantmont) -> reg u64[4]
	requires #[prover=smt] {wantmont==0 || wantmont==1}
	ensures #[prover=smt] {
     (\all (ii \in 0:4) (result.0[ii] == as[ii])) && wantmont==0 ||
     (\all (ii \in 0:4) (result.0[ii] == b[ii])) && wantmont==1
  }
{
	reg u64 wantmont_r;
	reg u64[4] a;
	
	a = #copy(as);
	wantmont_r = wantmont;
	
	a = __cmov4_rrrr(a, b, wantmont_r);
	
	return a;
}


inline fn __cmov4_ssrs(stack u64[4] as, reg u64[4] b, stack u64 wantmont) -> stack u64[4]
{
	reg u64 wantmont_r;
	reg u64[4] a res;
	stack u64[4] ress;
	
	a = #copy(as);
	wantmont_r = wantmont;
	
	res = __cmov4_rrrr(a, b, wantmont_r);
	ress = #copy(res);
	
	return ress;
}
