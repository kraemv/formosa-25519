require "shared_const.jinc"

abstract predicate bool eqmod(int, int, tuple);
abstract predicate tuple single(int);
abstract predicate tuple quad(u64, u64, u64, u64);
abstract predicate int b2i(bool);
abstract predicate int u64i(u64);
abstract predicate u256 limbs_4u64(tuple);
abstract predicate int pow(int, int);

fn __reduce5
( reg u64[4] h,
  reg u64[4] r,
  reg u64 _38,
  reg u64    z, // zero
  reg bool cf of // cf = 0 and of = 0
) -> reg u64[5]
	requires #[prover=smt]{_38 == 38}
	requires #[prover=cas]{_38 == 38}
	requires #[prover=smt]{z == 0}
	requires #[prover=cas]{z == 0}
	requires #[prover=smt]{!cf && !of}
	requires #[prover=cas]{b2i(of) == 0 && b2i(cf) == 0}
	ensures #[prover=cas] {
  eqmod (
     \sum (ii \in 0:5) (pow(2, 64*ii)*u64i(result.0[ii])),
     \sum (ii \in 0:4) (pow(2, 64*ii)*u64i(h[ii])) + \sum (ii \in 0:4) (pow(2, 64*(ii+4))*u64i(r[ii])),
     single((pow(2,255)) - 19)
    )
  }
{
  reg u64 hi lo;
	reg u64[5] red_h;
  //
  ( hi, lo )   = #MULX ( _38,  r[0] );
  of, red_h[0] = #ADOX ( h[0], lo, of );
  cf, h[1]     = #ADCX ( h[1], hi, cf );

  ( hi, lo )   = #MULX ( _38,  r[1] );
  of, red_h[1] = #ADOX ( h[1], lo, of );
  cf, h[2]     = #ADCX ( h[2], hi, cf );

  ( hi, lo )   = #MULX ( _38,  r[2] );
  of, red_h[2] = #ADOX ( h[2], lo, of );
  cf, h[3]     = #ADCX ( h[3], hi, cf );

  ( r[0], lo ) = #MULX ( _38, r[3] );
  of, red_h[3] = #ADOX ( h[3], lo, of );

  cf, r[0]     = #ADCX ( r[0], z, cf ); 
  of, red_h[4] = #ADOX ( r[0], z, of );

  #[kind=Assert, prover=smt] assert (!cf && !of);
  #[kind=Assume, prover=cas] assert (b2i(cf) == 0 && b2i(of) == 0);
  
  return red_h;
}

inline fn __reduce5to4_rs(stack u64[5] as) -> reg u64[4]
	requires #[prover=smt]{as[4] < 256}
	ensures #[prover=cas] {
  eqmod (
     \sum (ii \in 0:5) (pow(2, 64*ii)*u64i(as[ii])),
     \sum (ii \in 0:4) (pow(2, 64*ii)*u64i(result.0[ii])),
     single((pow(2,255)) - 19)
    )
  }
{
	reg u64[5] a;
	reg u64[4] c;
	reg bool cf;
	
	a = #copy(as);
	
  ?{}, a[4] = #SHLD(a[4], a[3], 1);
	a[3] &= mask63;

	_,_,_,_,_,a[4] = #IMULri ( a[4], 19 );
	cf, c[0] = a[0] + a[4];
	cf, c[1] = a[1] + 0 + cf;
	cf, c[2] = a[2] + 0 + cf;
	cf, c[3] = a[3] + 0 + cf;
	
	#[kind=Assert, prover=smt] assert (!cf);
  #[kind=Assume, prover=cas] assert (b2i(cf) == 0);

  return c;
}
