require "sc25519_from32bytes.jinc"
require "sc25519_barrett.jinc"
require "ge25519_unpackneg.jinc"
require "ge25519_double_scalarmult.jinc"
require "ge25519_pack.jinc"

fn mGnP(reg ptr u8[33] Q, reg u64[4] m, reg ptr u64[8] np, reg ptr u8[32] P, #msf reg u64 msf) -> reg ptr u8[33], #msf reg u64
{
	reg u64 z;
	stack u64 valids;
	reg u64 diff v_64 valid;
	reg u256 v_256;
	reg u64[4] n;
	stack u64[4] m_s m_red n_s;
	stack u64[12] r;
	stack u64[16] ps;
	#mmx reg ptr u8[33] Qs;
	inline int i;
	reg bool neq;
	#mmx reg u64 msf_s;
	
	msf_s = #mov_msf(msf);
	Qs = Q;
	m_s = #copy(m);
	m = sc25519_from32bytes(m);
	m_red = #copy(m);
	n = sc25519_barrett_p(np);
	n_s = #copy(n);
	msf = #mov_msf(msf_s);
	
	ps, valid, msf = ge25519_unpackneg_vartime(ps, P, msf);
	
	diff = 0;
	for i=0 to 4
	{
		v_64 = m_s[i];
		v_64 ^= m_red[i];
		diff |= v_64;
	}
	
	?{}, z = #set0();
	?{"!=" = neq} = #CMP(diff, 0);
	valid = #CMOVcc(!neq, valid, z);
	valids = valid;
	
	n = #copy(n_s);
	m = #copy(m_red);
	
	r, msf = __ge25519_double_scalarmult_vartime(r, ps, n, m, msf);
  v_256, msf = ge25519_pack(r, msf);
  
  Q = Qs;
  valid = valids;
  Q[u256 0] = #VMOVDQA_256(v_256);
  Q[32] = valid;
  
  return Q, msf;
}
