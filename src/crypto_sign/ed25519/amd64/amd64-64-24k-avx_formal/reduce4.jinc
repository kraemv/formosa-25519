require "shared_const.jinc"

abstract predicate bool eqmod(int, int, tuple);
abstract predicate tuple single(int);
abstract predicate int b2i(bool);
abstract predicate int u64i(u64);
abstract predicate int pow(int, int);

fn __reduce4
( reg u64[4] x,
  reg u64[4] r,
  reg u64 _38,
  reg u64 z, // zero
  reg bool cf of // cf = 0 and of = 0
) -> reg u64[4]
	requires #[prover=smt]{_38 == 38}
	requires #[prover=cas]{_38 == 38}
	requires #[prover=smt]{z == 0}
	requires #[prover=cas]{z == 0}
	requires #[prover=smt]{!cf && !of}
	requires #[prover=cas]{b2i(of) == 0 && b2i(cf) == 0}
	ensures #[prover=cas] {
  eqmod (
     \sum (ii \in 0:4) (pow(2, 64*ii)*u64i(result.0[ii])),
     \sum (ii \in 0:4) (pow(2, 64*ii)*u64i(x[ii])) + \sum (ii \in 0:4) (pow(2, 64*(ii+4))*u64i(r[ii])),
     single((pow(2,255)) - 19)
    )
  }
{
  reg u64 hi lo;
  reg u64[4] h h0;
  
  h = #copy(x);
  h0 = #copy(r);

  //
  ( hi, lo )   = #MULX ( _38,  h0[0] );
  of, h[0]     = #ADOX ( h[0], lo, of );
  cf, h[1]     = #ADCX ( h[1], hi, cf );

  ( hi, lo )   = #MULX ( _38,  h0[1] );
  of, h[1]     = #ADOX ( h[1], lo, of );
  cf, h[2]     = #ADCX ( h[2], hi, cf );

  ( hi, lo )   = #MULX ( _38,  h0[2] );
  of, h[2]     = #ADOX ( h[2], lo, of );
  cf, h[3]     = #ADCX ( h[3], hi, cf );

  ( h0[0], lo ) = #MULX ( _38, h0[3] );
  of, h[3]     = #ADOX ( h[3], lo, of );
  
  cf, h0[0]     = #ADCX ( h0[0], z, cf ); 
  of, h0[0]     = #ADOX ( h0[0], z, of );
	
	#[kind=Assert, prover=smt] assert (!cf && !of);
  #[kind=Assume, prover=cas] assert (b2i(cf) == 0 && b2i(of) == 0);
	
	// Holds until here
	#[kind=Assert, prover=cas] assert (
  eqmod (
     (\sum (ii \in 0:4) (pow(2, 64*ii)*u64i(h[ii]))) + (pow(2, 256)*u64i(h0[0])),
     \sum (ii \in 0:4) (pow(2, 64*ii)*u64i(x[ii])) + \sum (ii \in 0:4) (pow(2, 64*(ii+4))*u64i(r[ii])),
     single((pow(2,255)) - 19)
    )
  );
  
	?{}, h0[0] = #SHLD(h0[0], h[3], 1);
	h[3] &= mask63;
	#[kind=Assert, prover=smt] assert (h[3] == h[2]);
	#[kind=Assume, prover=cas] assert (h[3] == h[2]);

	_,_,_,_,_,h0[0] = #IMULri ( h0[0], 19 );
  
	cf, h[0] += h0[0];
	cf, h[1] += z + cf;
	cf, h[2] += z + cf;
	cf, h[3] += z + cf;
	
	#[kind=Assert, prover=smt] assert (!cf);
  #[kind=Assume, prover=cas] assert (b2i(cf) == 0);

  return h;
}
