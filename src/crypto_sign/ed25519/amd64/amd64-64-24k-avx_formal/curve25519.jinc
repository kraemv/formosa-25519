from formosa25519 require "crypto_sign/ed25519/amd64/common/64/add4.jinc"
from formosa25519 require "crypto_sign/ed25519/amd64/common/64/sub4.jinc"

require "mul4.jinc"
require "ge.jinc"
require "invert4.jinc"
require "fe25519_cmov.jinc"
require "fe25519_freeze.jinc"
require "sc25519_from32bytes.jinc"


fn _curve25519_mulx_base(reg u64 k0 k1 k2 k3, #msf reg u64 msf) -> reg u64, reg u64, reg u64, reg u64, #msf reg u64
{
	reg u64 r0 r1 r2 r3;
	reg u64 temp par wantmont;
	reg u64[4] _k r;
	reg u64[4] ZplusY ZminusY rx ry rz;
	stack u64 wantmonts;
	stack u64[4] rxs rys rzs;
	stack u64[16] ger;
	#mmx reg u64 msf_s;
	
	msf_s = #mov_msf(msf);
	
	_k[0] = k0;
  _k[1] = k1;
  _k[2] = k2;
  _k[3] = k3;
  
  _k = sc25519_from32bytes(_k);
  wantmont = _k[3];
  wantmont = wantmont >> 63;
  wantmonts = wantmont;
  _k[3] &= mask63;
  
  msf = #mov_msf(msf_s);
  ger, msf = __ge25519_scalarmult_base(ger, _k, msf);
  msf_s = #mov_msf(msf);
  
	ry[0] = ger[0];
	ry[1] = ger[1];
	ry[2] = ger[2];
	ry[3] = ger[3];
	
	ZplusY = __add4_rsr(ger[8:4], ry);
	ZminusY = __sub4_rsr(ger[8:4], ry);
	rys = __cmov4_ssrs(ger[4:4], ZplusY, wantmonts);
	rz = __cmov4_rsrs(ger[8:4], ZminusY, wantmonts);
	
	msf = #mov_msf(msf_s);
	rz, msf = __invert4(rz, msf);
  msf_s = #mov_msf(msf);
  
	rzs = #copy(rz);
	
	rys = __mul4_ssr(rys, rz);
	
	rx = __mul4_rss(ger[0:4], rzs);
  rxs = __freeze4_sr(rx);
  
	ry = #copy(rys);
	r = __fe25519_pack(ry);
  
  par = rxs[u64 0];
  par &= 0x1;
  
  temp = 1;
  temp -= wantmonts;
  
  par &= temp;
  par = par << 63;
  r[3] ^= par;
  
	r0 = r[0];
	r1 = r[1];
	r2 = r[2];
	r3 = r[3];
	
	msf = #mov_msf(msf_s);
  return r0, r1, r2, r3, msf;
}

inline fn __curve25519_mulx_base(reg u64[4] _k, #msf reg u64 msf) -> reg u64[4], #msf reg u64
{
	reg u64 k0 k1 k2 k3;
	reg u64 r0 r1 r2 r3;
	reg u64[4] r;
	
	k0 = _k[0];
	k1 = _k[1];
	k2 = _k[2];
	k3 = _k[3];
	
	#update_after_call
  r0, r1, r2, r3, msf = _curve25519_mulx_base(k0, k1, k2, k3, msf);
  

	r[0] = r0;
	r[1] = r1;
	r[2] = r2;
	r[3] = r3;
	
  return r, msf;
}

